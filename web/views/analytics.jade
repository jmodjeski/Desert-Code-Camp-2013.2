extends layout

block head
  script(
    src="http://d3js.org/d3.v3.min.js"
    charset="utf-8")
  script(type="text/javascript", src="/bower_components/rickshaw/rickshaw.js")
  script(type="text/javascript", src="/bower_components/momentjs/moment.js")

  link(rel="stylesheet", href="/bower_components/rickshaw/rickshaw.css")
  //- link(rel="import", href="/elements/framework-clock.html")
  //- link(rel="import", href="/elements/framework-participant.html")
  //- link(rel="import", href="/elements/framework-highchart.html")
  link(rel="import", href="/elements/framework-resource.html")
  link(rel="import", href="/elements/framework-datetime.html")

block content
  h1 
    .glyphicon.glyphicon-time
    span  #{meeting.title} 
  h6 (#{meeting.id}) | 
    a(href="/meeting/#{meeting.id}") detail

  meeting-analytics-app#app(meetingId="#{meeting.id}")




  //- Polymer element definitions

  polymer-element(name="meeting-log-resource", extends="framework-resource")
    script.
      Polymer("meeting-log-resource",{
        url: '/api/meetingslog',
        data: [],
        parse: function(d){
          return _.defaults({
            startTime: new Date(d.startTime),
            stopTime: new Date(d.stopTime)
          }, d);
        }
      })

  polymer-element(name="meeting-log-list")
    template
      table.table.table-stripted
        thead
          th Start
          th End
          th Duration
          th Cost
        tbody
          template(repeat="{{log in logs}}")
            tr
              td 
                framework-datetime(datetime="{{log.startTime}}")
              td 
                framework-datetime(datetime="{{log.stopTime}}")
              td 
                framework-datetime-duration(begin="{{log.startTime}}", end="{{log.stopTime}}")
              td 
                .pull-right $ {{ log.cost }}
    script.
      Polymer("meeting-log-list", {
        logs: [],
        created: function(){


        }
      });

  polymer-element(name="meetings-chart")
    style.
      #chart_container {
        position: relative;
      }
      #chart {
        position: relative;
        left: 40px;
        display: block;
      }
      #y_axis {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 40px;
      }
      #x_axis {
        position: relative;
        left: 40px;
        height: 40px;
      }
      #legend_container {
        float: left;
      }

    template
      .row
        .col-md-10
          #chart_container
            #y_axis
            #chart
            #x_axis
        .col-md-2
            #legend_container
              #legend
    script.
      Polymer("meetings-chart", {

        created: function(){
          var self = this;

          self.palette = new Rickshaw.Color.Palette({ scheme: 'classic9' });
        },

        initializeChart: function(series)
        {
          var self = this;

          var graph = self.graph = new Rickshaw.Graph({
            element: self.$.chart,
            interpolation: 'step-after',
            renderer: 'area',
            height: 300,
            width: 800,
            series: series
          });

          self.y_ticks = new Rickshaw.Graph.Axis.Y( {
            graph: self.graph,
            orientation: 'left',
            tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
            element: self.$.y_axis,
          });

          var xAxis = self.x_axis = new Rickshaw.Graph.Axis.Time({
              graph: graph
          });

          var legend = self.legend = new Rickshaw.Graph.Legend( {
            graph: graph,
            element: self.$.legend
          } );

          var shelving = new Rickshaw.Graph.Behavior.Series.Toggle({
              graph: graph,
              legend: legend
          });
          var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight({
              graph: graph,
              legend: legend
          });

          var hoverDetail = new Rickshaw.Graph.HoverDetail( {
              graph: graph,
              formatter: function(series, x, y){ 
                return "<div>" + series.name + "</div>"
                  + "<div>$ " + y + "</div>"; 
              }
          } );

          self.graph.render();
        },

        dataChanged: function(){
          var self = this;
          self.refreshChartData();
        },

        refreshChartData: function(){
          var self = this;
          var by = self.by;
          var grouped = _.chain(self.data)
            .map(function(x){ 
              return _.map(x.participants, function(p){
                return {
                  startTime: x.startTime, 
                  type: p.type, 
                  cost: p.totalCost
                };
              });
            })
            .flatten()
            .groupBy('type')
            .value();

          var series = _.map(grouped, function(v, k){
            return {
              name: k,
              color: self.palette.color(),
              data: _.map(v, function(d){
                  return {
                    x: moment(d.startTime).unix(),
                    y: d.cost
                  };
                })
            };
          });
          console.log(series);
          if(self.graph) {
            self.graph.series = series;
            self.graph.update();
          }
          else {
            self.initializeChart(series);
          }
        }
      })

  polymer-element(name="meeting-analytics-app")
    template
      .row
        .col-md-10.col-md-offset-1
          meetings-chart#chart

      .row
        .col-md-10.col-md-offset-1
          meeting-log-list#list
      meeting-log-resource#resource(on-query-complete="populateMeetingLogs")

    script.
      Polymer("meeting-analytics-app", {
        publish: {
          meetingId: ''
        },

        created:function(){
          var self = this;
          self.initialize();
        },

        meetingIdChanged: function(){
          var self = this;
          self.initialize();
        },

        initialize: function(){
          var self = this;
          self.$.resource.query({meetingId: self.meetingId});

          //- var randomInt = function(min, max)
          //- {
          //-   return Math.floor(Math.random() * (max - min) + min);
          //- }

          //- // mock log data
          //- for(var i = 0 ; i < 10; i++)
          //- {
          //-   var start = moment().add("d", i);
          //-   var end = moment().add("d", i).add({hours: randomInt(0,3), minutes:randomInt(5, 55)});
          //-   var sample = {
          //-     startTime: start.toDate(),
          //-     endTime: end.toDate(),
          //-     totalTime: moment.duration(end.diff(start)).asSeconds(),
          //-     cost: 0,
          //-     tags: [
          //-         'planning'
          //-     ],
          //-     participants: [
          //-       {
          //-         type: 'Developer',
          //-         rate: randomInt(100, 150),
          //-         count: randomInt(1,5),
          //-         totalCost: 0,
          //-       },
          //-       {
          //-         type: 'QA',
          //-         rate: randomInt(100, 150),
          //-         count: randomInt(1,3),
          //-         totalCost: 0
          //-       },
          //-       {
          //-         type: 'Offshore',
          //-         rate: randomInt(75, 100),
          //-         count: randomInt(1, 8),
          //-         totalCost: 0
          //-       }
          //-     ]
          //-   };
          //-   sample.participants.forEach(function(x){
          //-     var r = (x.rate * x.count) * moment.duration(sample.totalTime, "s").asHours();
          //-     x.totalCost = Math.round(r * 100) * 0.01;
          //-     sample.cost =  sample.cost + x.totalCost;
          //-   });
          //-   self.$.list.logs.push(sample);
          //- }
          //- self.$.chart.data = self.$.list.logs;
        },

        populateMeetingLogs: function(e, sender, detail){
          var self = this;
          self.$.list.logs = sender.data;
          self.$.chart.data = sender.data;
        },
      })

    


