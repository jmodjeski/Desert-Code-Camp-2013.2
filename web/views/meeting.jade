extends layout

block head
	link(rel="import", href="/elements/framework-clock.html")
	link(rel="import", href="/elements/framework-participant.html")
	link(rel="import", href="/elements/framework-resource.html")

block content
	h1 #{meeting.title} 
	h6 (#{meeting.id}) | 
		a(href="/analytics/#{meeting.id}") analytics

	polymer-element(
		name="participant-rows"
		extends="framework-resource"
	)
		template
			div
				template(repeat="{{p in participants}}")
					.row
						framework-participant(
							participant="{{p}}"
							meetingid="#{meeting.id}"
						)
				.row
					framework-participant(
						id="newParticipant"
						meetingid="#{meeting.id}"
						on-add-complete="resetDefaults"
					)
		script.
			Polymer("participant-rows", {
				publish: {
					meetingId: ''
				},
				url: '/api/meetings/#{meetingId}/participants',
				created: function () {
					if (this.url.indexOf('#{meetingId}') > 0)
						this.url = this.url.replace('#{meetingId}', this.meetingId);
					this.participants = [];
				},
				parse: function (data) {
					return _.defaults({
						participants: this.participants
					}, data);
				},
				resetDefaults: function (e, data) {
					this.participants.push(data.data);
					this.$.newParticipant.resetDefaults();
				}
			})
	
	polymer-element(name="meeting-detail-app", extends="framework-resource", on-fetch-complete="populateMeeting")
		template
			.row
				.col-md-4.col-md-offset-1
					framework-clock(id="start")
				.col-md-4.col-md-offset-2
					framework-clock(id="stop")
			.row
				button.btn(id="startMeeting", on-click="startMeeting") Start Meeting
				button.btn(id="stopMeeting", on-click="stopMeeting", disabled="disabled") End Meeting
			.row
				participant-rows(
					id="participants"
					meetingid="#{meeting.id}"
				)

		script.
			Polymer("meeting-detail-app", {
				publish: {
					meetingId: ''
				},

				url: '/api/meetings',

				created:function(){
					var self = this;
				},

				meetingIdChanged: function(){
					var self = this;
					self.initialize();
				},

				initialize: function(){
					var self = this;
					if (self.$.participants.url.indexOf('//') > 0) // This is a dirty hack
						self.$.participants.url = self.$.participants.url.replace('//', '/' + self.$.participants.meetingId + '/');
					self.meeting = {};
					self.fetch(self.meetingId);
				},

				populateMeeting: function (e, sender, detail) {
					if (sender) {
						this.meeting = sender.data || {};
						this.$.participants.participants = this.meeting.participants;
					}
				},

				startMeeting: function () {
					var startClock = this.$.start,
						stopClock = this.$.stop;
					if (!stopClock.isRunning) {
						startClock.setClock(new Date());
						stopClock.run();
						this.toggleMeetingButtons();
					}
				},

				stopMeeting: function () {
					var startClock = this.$.start,
						stopClock = this.$.stop;
					if (stopClock.isRunning) {
						stopClock.stop();
						// record metrics here
						console.log(stopClock.getElapsedTime(startClock.time));
						startClock.setClock(new Date());
						this.toggleMeetingButtons();
					}
				},

				toggleMeetingButtons: function () {
					var startMeetingButton = this.$.startMeeting,
						stopMeetingButton = this.$.stopMeeting,
						attr = document.createAttribute('disabled');
					attr.value = 'disabled';
					if (startMeetingButton.hasAttribute('disabled'))
						startMeetingButton.removeAttribute('disabled');
					else {
						startMeetingButton.setAttributeNode(attr);
					}

					if (stopMeetingButton.hasAttribute('disabled'))
						stopMeetingButton.removeAttribute('disabled');
					else {
						stopMeetingButton.setAttributeNode(attr);
					}
				}
			})

	meeting-detail-app(meetingId="#{meeting.id}")

