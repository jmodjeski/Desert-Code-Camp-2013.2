extends layout

block head
	script(type="text/javascript", src="/bower_components/momentjs/moment.js")
	script(type="text/javascript", src="/bower_components/highcharts/highcharts.js")
	
	link(rel="import", href="/elements/framework-clock.html")
	link(rel="import", href="/elements/framework-participant.html")
	link(rel="import", href="/elements/framework-highchart.html")
	link(rel="import", href="/elements/framework-resource.html")
	link(rel="import", href="/elements/framework-datetime.html")

block content
	h1 Meeting #{id}

	polymer-element(name="meeting-log-resource", extends="framework-resource")
		script.
			Polymer("meeting-log-resource",{
				url: '/api/meetingslog',
				data: [],
				parse: function(d){
					return _.defaults({
						startTime: new Date(d.startTime),
						endTime: new Date(d.endTime)
					}, d);
				}
			})

	polymer-element(name="meeting-log-list")
		template
			table.table.table-stripted
				thead
					th Start
					th End
					th Duration
					th Cost
				tbody
					template(repeat="{{log in logs}}")
						tr
							td 
								framework-datetime(datetime="{{log.startTime}}")
							td 
								framework-datetime(datetime="{{log.endTime}}")
							td 
								framework-datetime-duration(begin="{{log.startTime}}", end="{{log.endTime}}")
							td 
								.pull-right $ {{ log.cost }}
		script.
			Polymer("meeting-log-list", {
				logs: [],
				created: function(){


				}
			});

	polymer-element(name="meeting-log-chart")
		template
			framework-highchart(id="chart")
		script
			Polymer("meeting-log-chart", {

				created: function(){
					var self = this;

					self.$.chart.config = {
						chart: {
							type: 'column'
						},
						title: {
							text: 'Meeting Cost'
						},
						subtitle: {
							text: 'by type'
						}
					};
				},

				dataChanged: function(){
					var self = this;
					//- var categories = _.uniq(this.data.map(function(p){
					//- 	return p.startTime;
					//- }));

					//- var participantTypes = _.flatten(this.data, function(x){

					//- });
					//- console.log()

					//- self.$.chart.config.xAxis = {
					//- 	categories: categories,
					//- 	series: [

					//- 	]
					//- };
				}
			})

	polymer-element(name="meeting-detail-app")
		template
			.row
				.col-md-4.col-md-offset-1
					framework-clock(id="start")
				.col-md-4.col-md-offset-2
					framework-clock(id="stop")

			.row
				.col-md-4.col-md-offset-1
					button(id="startClock", on-click="toggleStartClock") Toggle Start Clock
				.col-md-4.col-md-offset-2
					button(id="stopClock", on-click="toggleStopClock") Toggle Stop Clock

			//- .row
			//- 	framework-participant(id="test", edit="edit")
			//- 	framework-participant(id="test2")

			.row
				.col-md-10.col-md-offset-1
					meeting-log-chart(id="chart", style="height: 400px;")
			.row
				.col-md-10.col-md-offset-1
					meeting-log-list(id="list")
			meeting-log-resource(id="resource", on-query-complete="populateMeetingLogs")
		script.
			Polymer("meeting-detail-app", {
				publish: {
					meetingId: ''
				},

				created:function(){
					var self = this;
					//- self.$.start.run();
					//- self.$.stop.run();
				},

				meetingIdChanged: function(){
					var self = this;
					self.initialize();
				},

				initialize: function(){
					var self = this;
					self.$.resource.query({meeting_id: self.meetingId});

					// mock log data
					for(var i = 0 ; i < 10; i++)
					{
						var start = moment().add("d", i);
						var end = moment().add("d", i).add({hours:1, minutes:10});
						var sample = {
							startTime: start.toDate(),
							endTime: end.toDate(),
							totalTime: moment.duration(end.diff(start)).asSeconds(),
							cost: 0,
							tags: [
									'planning'
							],
							participants: [
								{
									type: 'consultant',
									rate: 100,
									count: 5,
									totalCost: 0,
								},
								{
									type: 'qa',
									rate: 100,
									count: 3,
									totalCost: 0
								}
							]
						};
						sample.participants.forEach(function(x){
							var r = (x.rate * x.count) * moment.duration(sample.totalTime, "s").asHours();
							x.totalCost = Math.round(r * 100) * 0.01;
							sample.cost =  sample.cost + x.totalCost;
						});
						self.$.list.logs.push(sample);
					}
				},

				populateMeetingLogs: function(e, sender, detail){
					var self = this;
					//self.$.list.logs = sender.data;
				},

				toggleStartClock: function(){
					var self = this;
					self.$.start.toggle();
				},

				toggleStopClock: function(){
					var self = this;
					self.$.stop.toggle();
				}
			})

	meeting-detail-app(meetingid="#{id}")

	script.
		Platform.ShadowCSS.strictStyling = true;
