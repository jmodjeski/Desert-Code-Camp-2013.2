extends layout

block head
	link(rel="import", href="/elements/framework-clock.html")
	link(rel="import", href="/elements/framework-participant.html")
	link(rel="import", href="/elements/framework-resource.html")

block content
	h1 #{meeting.title} 
	h6 (#{meeting.id}) | 
		a(href="/analytics/#{meeting.id}") analytics

	polymer-element(
		name="participant-rows"
		extends="framework-resource"
	)
		template
			div
				template(repeat="{{p in participants}}")
					.row
						framework-participant(
							participant="{{p}}"
							meetingid="#{meeting.id}"
						)
				.row
					framework-participant(
						id="newParticipant"
						meetingid="#{meeting.id}"
						on-add-complete="resetDefaults"
					)
		script.
			Polymer("participant-rows", {
				publish: {
					meetingId: ''
				},
				url: '/api/meetings/#{meetingId}/participants',
				created: function () {
					if (this.url.indexOf('#{meetingId}') > 0)
						this.url = this.url.replace('#{meetingId}', this.meetingId);
					this.participants = [];
				},
				parse: function (data) {
					return _.defaults({
						participants: this.participants
					}, data);
				},
				resetDefaults: function (e, data) {
					this.participants.push(data.data);
					this.$.newParticipant.resetDefaults();
				}
			})
	
	polymer-element(name="meeting-detail-app", extends="framework-resource", on-fetch-complete="populateMeeting")
		template
			.row
				.col-md-4.col-md-offset-1
					framework-clock(id="start")
				.col-md-4.col-md-offset-2
					framework-clock(id="stop")
			.row
				.col-md-4.col-md-offset-2
					button.btn(id="startMeeting", on-click="startMeeting") 
						span.glyphicon.glyphicon-play 
						span Start Meeting
				.col-md-4.col-md-offset-2
					button.btn(id="stopMeeting", on-click="stopMeeting", disabled="disabled") 
						span.glyphicon.glyphicon-stop 
						span End Meeting
			.row
				participant-rows(
					id="participants"
					meetingid="#{meeting.id}"
				)

		script.
			Polymer("meeting-detail-app", {
				publish: {
					meetingId: ''
				},

				url: '/api/meetings',

				meetingUrl: '/api/meetings',

				meetingLogUrl: '/api/meetingslog',

				defaultTime: moment('1-1-2001').toDate(),

				defaultMeetingLog: {
					startTime: new Date(),
					stopTime: new Date(),
					totalTime: 0,
					cost: 0.0,
					tags: [],
					participants: []
				},

				created:function(){
					var self = this;
				},

				meetingIdChanged: function(){
					var self = this;
					self.initialize();
				},

				initialize: function(){
					var self = this;
					if (self.$.participants.url.indexOf('//') > 0) // This is a dirty hack
						self.$.participants.url = self.$.participants.url.replace('//', '/' + self.$.participants.meetingId + '/');
					self.meeting = {};
					self.fetch(self.meetingId);
				},

				populateMeeting: function (e, sender, detail) {
					if (sender) {
						this.meeting = sender.data || {};
						this.$.participants.participants = this.meeting.participants;
						if (this.meeting.startTime && !moment(this.meeting.startTime).isSame(this.defaultTime)) {
							this.runClock();
						}
					}
				},

				runClock: function () {
					this.$.start.setClock(moment(this.meeting.startTime).toDate());
					this.$.stop.run();
					this.toggleMeetingButtons();
				},

				startMeeting: function () {
					var startClock = this.$.start,
						stopClock = this.$.stop;
					if (!stopClock.isRunning) {
						if (moment(this.meeting.startTime).isSame(this.defaultTime)) {
							this.meeting.startTime = new Date();
							this.update(this.meeting.id, this.meeting);
						}
						this.runClock();
					}
				},

				stopMeeting: function () {
					var startClock = this.$.start,
						stopClock = this.$.stop;
					if (stopClock.isRunning) {
						stopClock.stop();
						var log = this.createMeetingLog(startClock.time, stopClock.getElapsedTime(startClock.time));
						this.url = this.meetingLogUrl;
						this.create(log);
						this.url = this.meetingUrl;
						startClock.setClock(new Date());
						this.meeting.startTime = this.defaultTime;
						this.update(this.meeting.id, this.meeting);
						this.toggleMeetingButtons();
					}
				},

				createMeetingLog: function (startTime, duration) {
					var endTime = moment(startTime).add('s', duration).toDate(),
						log = this.defaultMeetingLog,
						cost = 0.0;

					log.startTime = startTime;
					log.totalTime = duration;
					log.stopTime = endTime;
					log.meetingId = this.meeting.id;

					this.meeting.participants.forEach(function (x) {
						var r = Math.round(((x.rate * x.count) * moment.duration(log.totalTime, 's').asHours()) * 100) * 0.01;
						log.participants.push({
							type: x.type,
							rate: x.rate, 
							count: x.count,
							totalCost: r
						});
						cost += Math.round(r * 100) * 0.01;
					});

					log.cost = cost;

					return log;
				},

				toggleMeetingButtons: function () {
					var startMeetingButton = this.$.startMeeting,
						stopMeetingButton = this.$.stopMeeting,
						attr = document.createAttribute('disabled');
					attr.value = 'disabled';
					if (startMeetingButton.hasAttribute('disabled'))
						startMeetingButton.removeAttribute('disabled');
					else {
						startMeetingButton.setAttributeNode(attr);
					}

					if (stopMeetingButton.hasAttribute('disabled'))
						stopMeetingButton.removeAttribute('disabled');
					else {
						stopMeetingButton.setAttributeNode(attr);
					}
				}
			})

	meeting-detail-app(meetingId="#{meeting.id}")

