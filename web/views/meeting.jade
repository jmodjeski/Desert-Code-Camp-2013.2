extends layout

block head
	script(type="text/javascript", src="/bower_components/momentjs/moment.js")
	script(type="text/javascript", src="/bower_components/highcharts/highcharts.js")
	
	link(rel="import", href="/elements/framework-clock.html")
	link(rel="import", href="/elements/framework-participant.html")
	link(rel="import", href="/elements/framework-highchart.html")
	link(rel="import", href="/elements/framework-resource.html")
	link(rel="import", href="/elements/framework-datetime.html")

block content
	h1 Meeting #{id}

	polymer-element(
		name="participant-rows"
		extends="framework-resource"
	)
		template
			div
				template(repeat="{{p in participants}}")
					.row
						framework-participant(participant="{{p}}")
				.row
					framework-participant
		script.
			Polymer("participant-rows", {
				publish: {
					meetingId: ''
				},
				url: '/api/meetings/participants',
				created: function () {
					this.participants = [];
				},
				parse: function (data) {
					return _.defaults({
						participants: this.participants
					}, data);
				}
			})

	polymer-element(name="meeting-log-resource", extends="framework-resource")
		script.
			Polymer("meeting-log-resource",{
				url: '/api/meetingslog',
				data: [],
				parse: function(d){
					return _.defaults({
						startTime: new Date(d.startTime),
						endTime: new Date(d.endTime)
					}, d);
				}
			})

	polymer-element(name="meeting-log-list")
		template
			table.table.table-stripted
				thead
					th Start
					th End
					th Duration
					th Cost
				tbody
					template(repeat="{{log in logs}}")
						tr
							td 
								framework-datetime(datetime="{{log.startTime}}")
							td 
								framework-datetime(datetime="{{log.endTime}}")
							td 
								framework-datetime-duration(begin="{{log.startTime}}", end="{{log.endTime}}")
							td 
								.pull-right $ {{ log.cost }}
		script.
			Polymer("meeting-log-list", {
				logs: [],
				created: function(){


				}
			});

	polymer-element(name="meeting-log-chart")
		template
			select.pull-right(id="by", value="{{by}}")
				option(value="day") Day
				option(value="month") Month
			framework-highchart(id="chart")
		script.
			Polymer("meeting-log-chart", {
				dateFormats: {
					day: 'MMM Do, YYYY',
					month: 'MMM, YYYY',
					year: 'YYYY'
				},
				by: "month",
				created: function(){
					var self = this;

					self.$.chart.config = {
						chart: {
							type: 'column'
						},
						title: {
							text: 'Meeting Cost'
						},
						subtitle: {
							text: 'by type'
						},
						xAxis: {
							categories: []
						},
						series: []
					};
				},

				byChanged: function(){
					var self = this;
					self.refreshChartData();
				},

				dataChanged: function(){
					var self = this;
					self.refreshChartData();
				},

				refreshChartData: function(){
					var self = this;
					var by = self.by;
					var grouping = function(p){
							return moment(p.startTime).startOf(by).format(self.dateFormats[by]);
						};

					var grouped = _.chain(self.data)
						.map(function(x){ 
							return _.map(x.participants, function(p){
								return {
									startTime: x.startTime, 
									type: p.type, 
									cost: p.totalCost
								};
							});
						})
						.flatten()
						.groupBy(grouping)
						.forEach(function(x, k, t) { 
							t[k] = _.groupBy(_.flatten(x), 'type'); 
							_.forEach(t[k], function(x, k, t){
								t[k] = _.reduce(x, function(result, v){
									return result + v.cost;
								}, 0);
							});
						})
						.value();

					console.log(grouped);

					var categories = _.keys(grouped);

					var participantTypes = _.uniq(_.flatten(this.data, function(x){
						return x.participants.map(function(p){
							return p.type;
						});
					}));

					var series = participantTypes.map(function(p){
						return {
							name: p,
							data: _.map(grouped, function(x){
								return x[p] || 0;	
							})
						};
					});

					var chart = self.$.chart.getChart();			
					if(chart.xAxis)
						chart.xAxis[0].setCategories(_.keys(grouped), false);
					else
						chart.addAxis({categories: _.keys(grouped)}, true, false);
					var seriesIndex = 0;
					// add/update current chart series
					for(; seriesIndex < series.length; seriesIndex++)
					{
						var s = series[seriesIndex];
						if(seriesIndex < chart.series.length)
						{
							chart.series[seriesIndex].update(s, false);
						} else {
							chart.addSeries(s, false);
						}
					}
					// remove unessary series
					while(seriesIndex < chart.series.length)
					{
						chart.series[seriesIndex].remove(false);
					}

					chart.redraw();
				}
			})

	polymer-element(name="meeting-detail-app")
		template
			.row
				.col-md-4.col-md-offset-1
					framework-clock(id="start")
				.col-md-4.col-md-offset-2
					framework-clock(id="stop")

			.row
				participant-rows(
					id="participants-control"
					meetingid="#{_id}")

			.row
				.col-md-10.col-md-offset-1
					meeting-log-chart(id="chart", style="height: 400px;")

			.row
				.col-md-10.col-md-offset-1
					meeting-log-list(id="list")
			meeting-log-resource(id="resource", on-query-complete="populateMeetingLogs")
		script.
			Polymer("meeting-detail-app", {
				publish: {
					meetingId: ''
				},

				created:function(){
					var self = this;
					//- self.$.start.run();
					//- self.$.stop.run();
				},

				meetingIdChanged: function(){
					var self = this;
					self.initialize();
				},

				initialize: function(){
					var self = this;
					self.$.resource.query({meeting_id: self.meetingId});

					var randomInt = function(min, max)
					{
						return Math.floor(Math.random() * (max - min) + min);
					}

					// mock log data
					for(var i = 0 ; i < 10; i++)
					{
						var start = moment().add("d", i);
						var end = moment().add("d", i).add({hours: randomInt(0,3), minutes:randomInt(5, 55)});
						var sample = {
							startTime: start.toDate(),
							endTime: end.toDate(),
							totalTime: moment.duration(end.diff(start)).asSeconds(),
							cost: 0,
							tags: [
									'planning'
							],
							participants: [
								{
									type: 'Developer',
									rate: randomInt(100, 150),
									count: randomInt(1,5),
									totalCost: 0,
								},
								{
									type: 'QA',
									rate: randomInt(100, 150),
									count: randomInt(1,3),
									totalCost: 0
								},
								{
									type: 'Offshore',
									rate: randomInt(75, 100),
									count: randomInt(1, 8),
									totalCost: 0
								}
							]
						};
						sample.participants.forEach(function(x){
							var r = (x.rate * x.count) * moment.duration(sample.totalTime, "s").asHours();
							x.totalCost = Math.round(r * 100) * 0.01;
							sample.cost =  sample.cost + x.totalCost;
						});
						self.$.list.logs.push(sample);
					}
					self.$.chart.data = self.$.list.logs;
				},

				populateMeetingLogs: function(e, sender, detail){
					var self = this;
					//self.$.list.logs = sender.data;
				},

				toggleStartClock: function(){
					var self = this;
					self.$.start.toggle();
				},

				toggleStopClock: function(){
					var self = this;
					self.$.stop.toggle();
				}
			})

	meeting-detail-app(meetingid="#{id}")

